#!/bin/ksh 
# Nautilus-Actions
# A Nautilus extension which offers configurable context menu actions.
#
# Copyright (C) 2005 The GNOME Foundation
# Copyright (C) 2006, 2007, 2008 Frederic Ruaudel and others (see AUTHORS)
# Copyright (C) 2009, 2010, 2011 Pierre Wieser and others (see AUTHORS)
#
# This Program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This Program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this Library; see the file COPYING.  If not,
# write to the Free Software Foundation, Inc., 59 Temple Place,
# Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#   Frederic Ruaudel <grumz@grumz.net>
#   Rodrigo Moya <rodrigo@gnome-db.org>
#   Pierre Wieser <pwieser@trychlos.org>
#   ... and many others (see AUTHORS)

errs=0										# will be the exit code of the script
my_cmd="${0}"								# e.g. "./make-ks.sh"
my_parms="$*"								# e.g. "-host toaster"
my_cmdline="${my_cmd} ${my_parms}"
me="$(basename ${my_cmd})"					# e.g. "make-ks.sh"
											# used in msg and msgerr functions
my_tmproot="/tmp/$(echo ${me} | sed 's?\..*$??').$$"
											# e.g. "/tmp/make-ks.1978"

# These three functions must be defined using the name() syntax in order
# to share traps with the caller process (cf. man (1) ksh).
#
trap_exit()
{
	clear_tmpfiles
	[ "${opt_verbose}" = "yes" -o ${errs} -gt 0 ] && msg "exiting with code ${errs}"
	exit ${errs}
}

trap_int()
{
	msg "quitting on keyboard interrupt"
	let errs+=1
	exit
}

trap_term()
{
	[ "${opt_verbose}" = "yes" ] && msg "quitting on TERM signal"
	exit
}

# setup the different trap functions
trap 'trap_term' TERM
trap 'trap_int'  INT
trap 'trap_exit' EXIT

function clear_tmpfiles
{
	\rm -f ${my_tmproot}.*
}

function msg
{
	typeset _eol="\n"
	[ $# -ge 2 ] && _eol="${2}"
	printf "[%s] %s${_eol}" ${me} "${1}"
	return 0
}

function msgerr
{
	msg "error: ${1}" 1>&2
	return $?
}

function msgwarn
{
	msg "warning: ${1}" 1>&2
	return $?
}

function msg_help
{
	msg_version
	echo "
 This program is meant to safely migrate items, menus and actions, and
 preferences from GConf to .desktop files.
 Users items and preferences are automatically migrated when Nautilus-Actions
 menu plugin is loaded by Nautilus file-manager, or when one of the utilities
 is run by the user.
 A system administrator should nonetheless run himself this script in order
 to migrate mandatory items and preferences he may have previsouly set.

 Usage: ${my_cmd} [options]
   --[no]help                print this message, and exit [${opt_help_def}]
   --[no]version             print script version, and exit [${opt_version_def}]
   --[no]dummy               dummy execution [${opt_dummy_def}]
   --[no]verbose             runs verbosely [${opt_verbose_def}]
   --print=/filename         full pathname of the nautilus-actions-print program [${opt_print_def}]
   --dir=/dirname            directory where the migrated objects must be stored [${opt_dir_def}]
   --[no]force               force the rewriting of an already existing item [${opt_force_def}]
   --[no]delete              delete the item after the migration [${opt_delete_def}]"
}

function msg_version
{
	echo "
 @PACKAGE_NAME@ v @PACKAGE_VERSION@
 Copyright (C) 2011 Pierre Wieser."
}

function command
{
	typeset _cmd="${1}"

	if [ "${opt_dummy}" = "yes" -o "${opt_verbose}" = "yes" ]; then
		typeset _prefix=""
		[ "${opt_dummy}" = "yes" ] && _prefix="[dummy] "
		echo "${_prefix}${_cmd}"
	fi

	if [ "${opt_dummy}" = "no" ]; then
		eval ${_cmd}
	fi
}

# initialize common command-line options
nbopt=$#
opt_help=
opt_help_def="no"
opt_dummy=
opt_dummy_def="yes"
opt_version=
opt_version_def="no"
opt_verbose=
opt_verbose_def="no"

# a first loop over command line arguments to detect verbose mode
while :
do
	# break when all arguments have been read
	case $# in
		0)
			break
			;;
	esac

	# get and try to interpret the next argument
	_option=$1
	shift

	# make all options have two hyphens
	_orig_option=${_option}
	case ${_option} in
		--*)
			;;
		-*)
			_option=-${_option}
				;;
		esac

	# now process options and their argument
	case ${_option} in
		--noverb | --noverbo | --noverbos | --noverbose)
			opt_verbose="no"
			;;
		--verb | --verbo | --verbos | --verbose)
			opt_verbose="yes"
				;;
	esac
done

[ "${opt_verbose}" = "yes" ] && msg "setting opt_verbose to 'yes'"

# script_opt_verb has scanned all command-line arguments
# in order to detect the opt_verbose;
# reset arguments so that they can be scanned again in main script 
set -- ${my_parms}

# interpreting command-line arguments
print_program="nautilus-actions-print"
opt_print=
opt_print_def="$(which ${print_program} 2>/dev/null)"

opt_dir=
[ $(id -u) -eq 0 ] && opt_dir_def="/usr" || opt_dir_def="${HOME}/.local"
opt_dir_def="${opt_dir_def}/share/file-manager/actions"

# default is to not force rewriting of already existing items
# instead they are renumbered
opt_force=
opt_force_def="no"

# default is to not delete the migrated item
opt_delete=
opt_delete_def="no"

# path of the branch which contains the configurations
na_package="/apps/@PACKAGE@"
na_configurations="${na_package}/configurations"
na_preferences="${na_package}/preferences"
na_providers="${na_package}/providers"

# loop over command line arguments
pos=0
while :
do
	# break when all arguments have been read
	case $# in
		0)
			break
			;;
	esac

	# get and try to interpret the next argument
	option=$1
	shift

	# make all options have two hyphens
	orig_option=${option}
	case ${option} in
		--*)
			;;
		-*)
			option=-${option}
			;;
	esac

	# split and extract argument for options that take one
	case ${option} in
		--*=*)
			optarg=$(echo ${option} | sed -e 's/^[^=]*=//')
			option=$(echo ${option} | sed 's/=.*//')
			;;
		# these options take a mandatory argument
		# since, we didn't find it in 'option', so it should be
		# next word in the command line
		--di | --dir | \
		--p | --pr | --pri | --prin | --print)
			optarg=$1
			shift
			;;
	esac

	# now process options and their argument
	case ${option} in
		--de | --del | --dele | --delet | --delete)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_delete to 'yes'"
			opt_delete="yes"
			;;
		--di | --dir)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_dir to '${optarg}'"
			opt_dir="${optarg}"
			;;
		--du | --dum | --dumm | --dummy)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_dummy to 'yes'"
			opt_dummy="yes"
			;;
		--f | --fo | --for | --forc | --force)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_force to 'yes'"
			opt_force="yes"
			;;
		--h | --he | --hel | --help)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_help to 'yes'"
			opt_help="yes"
			;;
		--node | --nodel | --nodele | --nodelet | --nodelete)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_delete to 'no'"
			opt_delete="no"
			;;
		--nodu | --nodum | --nodumm | --nodummy)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_dummy to 'no'"
			opt_dummy="no"
			;;
		--nof | --nofo | --nofor | --noforc | --noforce)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_force to 'no'"
			opt_force="no"
			;;
		--noh | --nohe | --nohel | --nohelp)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_help to 'no'"
			opt_help="no"
			;;
		--noverb | --noverbo | --noverbos | --noverbose)
			;;
		--novers | --noversi | --noversio | --noversion)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_version to 'no'"
			opt_version="no"
			;;
		--p | --pr | --pri | --prin | --print)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_print to '${optarg}'"
			opt_print="${optarg}"
			;;
		--verb | --verbo | --verbos | --verbose)
			;;
		--vers | --versi | --versio | --version)
			[ "${opt_verbose}" = "yes" ] && msg "setting opt_version to 'yes'"
			opt_version="yes"
			;;
		--*)
			msgerr "unrecognized option: '${orig_option}'"
			let errs+=1
			;;
		# positional parameters
		*)
			let pos+=1
			#if [ ${pos} -eq 1 ]; then
			#	[ "${opt_verbose}" = "yes" ] && msg "setting opt_output to '${option}'"
			#	opt_output=${option}
			#else
				msgerr "unexpected positional parameter #${pos}: '${option}'"
				let errs+=1
			#fi
			;;
	esac
done

# set option defaults
set | grep -e '^opt_' | cut -d= -f1 | while read _name; do
	if [ "$(echo ${_name} | sed 's/.*\(_orig\)/\1/')" != "_orig" ]; then
		if [ "$(echo ${_name} | sed 's/.*\(_def\)/\1/')" != "_def" ]; then
			_value="$(eval echo "$"${_name})"
			eval ${_name}_orig="$(eval echo "$"${_name})"
			if [ ${nbopt} -eq 0 -a "${_name}" = "opt_help" ]; then
				opt_help="yes"
				_value="yes"
			fi
			if [ "${_value}" = "" ]; then
				eval ${_name}="$(eval echo "$"${_name}_def)"
			fi
		fi
	fi
done

if [ "${opt_help}" = "yes" -o ${nbopt} -eq 0 ]; then
	msg_help
	echo ""
	exit
fi

if [ "${opt_version}" = "yes" ]; then
	msg_version
	echo ""
	exit
fi

if [ "${opt_print}" = "" ]; then
	msgerr "${print_program}: not found"
	let errs+=1
elif [ ! -x ${opt_print} ]; then
	msgerr "${print_program}: not executable"
	let errs+=1
fi

if [ ${errs} -gt 0 ]; then
	msg "${errs} error(s) have been detected"
	msg "try '${my_cmd} --help' for usage"
	exit
fi

function add_pref
{
	typeset _group="${1}"
	typeset _key="${2}"
	typeset _type="${3}"
	typeset _value="${4}"

	typeset _newvalue="${4}"
	if [ "${_type}" = "list" ]; then
		_newvalue="$(echo "${_value}" | sed -e 's/^\[//' -e 's/]$//' -e 's/,/;/g');"
	fi
	echo "${_key} = ${_newvalue}" >> ${my_tmproot}.${_group}
}

function create_first_level
{
	typeset _newvalue="$(echo "$1" | sed -e 's/^\[//' -e 's/]$//' -e 's/,/;/g');"
	echo "ItemsList = ${_newvalue}" >> ${my_tmproot}.zero
}

# ---------------------------------------------------------------------
# MAIN CODE

# if we do not have gconftool-2, then exit
which gconftool-2 1>/dev/null 2>&1 || { msg "gconftool-2: not available"; exit 1; }

# create the destination directory if it does not yet exist
command "mkdir -p ${opt_dir} || exit 1"

let count=0

# list objects in configurations/ subdir
# each object, action or menu, is then exported in .a .desktop format
# to be written to its .desktop file
for dir in $(gconftool-2 --all-dirs ${na_configurations}); do
	id=$(basename ${dir})
	let count+=1
	[ "${opt_verbose}" = "yes" ] && msg "item=${id}"
	if [ -e ${opt_dir}/${id}.desktop -a "${opt_force}" = "no" ]; then
		msgwarn "${opt_dir}/${id}.desktop already exists"
		i=0
		while [ -e ${opt_dir}/${id}-${i}.desktop ]; do
			let i+=1
		done
		command "${opt_print} --id ${id} | grep -v ${print_program} > ${opt_dir}/${id}-${i}.desktop"
	else
		command "${opt_print} --id ${id} | grep -v ${print_program} > ${opt_dir}/${id}.desktop"
	fi
done

# we are using this same script to migrate preferences to .conf files
# mandatory preferences go to SYSCONFDIR/nautilus-actions.conf
# while user preferences go to HOME/.config/nautilus-actions.conf
# Note also that the GConf I/O provider is disabled both for reading
# and writing
[ $(id -u) -eq 0 ] && destdir=@SYSCONFDIR@ || destdir=${HOME}/.config
command "mkdir -p ${destdir}"
destconf=${destdir}/@PACKAGE@.conf
rm -f ${my_tmproot}.nact
rm -f ${my_tmproot}.runtime
rm -f ${my_tmproot}.zero
nbprefs=0
have_level_zero=0

gconftool-2 --all-entries ${na_preferences} | while read key x value; do
	case ${key} in
		add-capability-dialog)
			let nbprefs+=1
			add_pref "nact" "capability-add-capability-dialog-size" list "${value}"
			;;
		add-scheme-dialog)
			let nbprefs+=1
			add_pref "nact" "scheme-add-scheme-dialog-size" list "${value}"
			;;
		assistant-esc-confirm)
			let nbprefs+=1
			add_pref "nact" "${key}" str "${value}"
			;;
		assistant-esc-quit)
			let nbprefs+=1
			add_pref "nact" "${key}" str "${value}"
			;;
		auto-save-on)
			let nbprefs+=1
			add_pref "nact" "main-save-auto" str "${value}"
			;;
		auto-save-period)
			let nbprefs+=1
			add_pref "nact" "main-save-period" str "${value}"
			;;
		export-assistant)
			let nbprefs+=1
			add_pref "nact" "assistant-dialog-size" list "${value}"
			;;
		export-folder-uri)
			let nbprefs+=1
			add_pref "nact" "export-last-folder-uri" str "${value}"
			;;
		export-format)
			let nbprefs+=1
			add_pref "nact" "export-preferred-format" str "${value}"
			;;
		icommand-command-chooser)
			let nbprefs+=1
			add_pref "nact" "command-command-chooser-dialog-size" list "${value}"
			;;
		icommand-folder-uri)
			let nbprefs+=1
			add_pref "nact" "command-command-chooser-last-folder-uri" list "${value}"
			;;
		icommand-legend-dialog)
			let nbprefs+=1
			add_pref "nact" "command-legend-dialog-size" list "${value}"
			;;
		icommand-working-dir-dialog)
			let nbprefs+=1
			add_pref "nact" "command-working-dir-chooser-dialog-size" list "${value}"
			;;
		icommand-working-dir-uri)
			let nbprefs+=1
			add_pref "nact" "command-working-dir-chooser-last-folder-uri" str "${value}"
			;;
		icons-chooser)
			let nbprefs+=1
			add_pref "nact" "item-icon-chooser-dialog-size" list "${value}"
			;;
		icons-path)
			let nbprefs+=1
			add_pref "nact" "item-icon-browse-last-path" str "${value}"
			;;
		ienvironment-show-if-running-dialog)
			let nbprefs+=1
			add_pref "nact" "environment-show-if-running-dialog-size" list "${value}"
			;;
		ienvironment-show-if-running-uri)
			let nbprefs+=1
			add_pref "nact" "environment-show-if-running-last-folder-uri" str "${value}"
			;;
		ienvironment-try-exec-dialog)
			let nbprefs+=1
			add_pref "nact" "environment-try-exec-dialog-size" list "${value}"
			;;
		ienvironment-try-exec-uri)
			let nbprefs+=1
			add_pref "nact" "environment-show-if-running-last-folder-uri" str "${value}"
			;;
		ifolders-chooser)
			let nbprefs+=1
			add_pref "nact" "folder-chooser-dialog-size" list "${value}"
			;;
		ifolders-path)
			let nbprefs+=1
			add_pref "nact" "folder-last-path" str "${value}"
			;;
		import-ask-user)
			let nbprefs+=1
			add_pref "nact" "import-ask-user-dialog-size" list "${value}"
			;;
		import-ask-user-last-mode)
			let nbprefs+=1
			add_pref "nact" "${key}" str "${value}"
			;;
		import-assistant)
			let nbprefs+=1
			add_pref "nact" "import-assistant-dialog-size" list "${value}"
			;;
		import-folder-uri)
			let nbprefs+=1
			add_pref "nact" "import-last-folder-uri" str "${value}"
			;;
		import-keep-choice)
			let nbprefs+=1
			add_pref "nact" "import-mode-keep-last-choice" list "${value}"
			;;
		import-mode)
			let nbprefs+=1
			add_pref "nact" "import-preferred-mode" str "${value}"
			;;
		io-providers-order)
			let nbprefs+=1
			add_pref "runtime" "io-providers-order" list "${value}"
			;;
		iprefs-add-about-item)
			let nbprefs+=1
			add_pref "runtime" "items-add-about-item" str "${value}"
			;;
		iprefs-alphabetical-order)
			let nbprefs+=1
			add_pref "runtime" "items-list-order" str "${value}"
			;;
		iprefs-create-root-menu)
			let nbprefs+=1
			add_pref "runtime" "items-create-root-menu" str "${value}"
			;;
		iprefs-level-zero)
			# for now, keep the level zero order as a runtime preference
			#let have_level_zero+=1
			#create_first_level "${value}"
			let nbprefs+=1
			add_pref "runtime" "items-level-zero-order" list "${value}"
			;;
		iprefs-relabel-actions)
			let nbprefs+=1
			add_pref "nact" "relabel-when-duplicate-action" str "${value}"
			;;
		iprefs-relabel-menus)
			let nbprefs+=1
			add_pref "nact" "relabel-when-duplicate-menu" str "${value}"
			;;
		iprefs-relabel-profiles)
			let nbprefs+=1
			add_pref "nact" "relabel-when-duplicate-profile" str "${value}"
			;;
		main-edit-toolbar)
			let nbprefs+=1
			add_pref "nact" "main-toolbar-edit-display" str "${value}"
			;;
		main-file-toolbar)
			let nbprefs+=1
			add_pref "nact" "main-toolbar-file-display" str "${value}"
			;;
		main-help-toolbar)
			let nbprefs+=1
			add_pref "nact" "main-toolbar-help-display" str "${value}"
			;;
		main-tools-toolbar)
			let nbprefs+=1
			add_pref "nact" "main-toolbar-tools-display" str "${value}"
			;;
		main-paned)
			let nbprefs+=1
			add_pref "nact" "main-pane-width" str "${value}"
			;;
		main-window)
			let nbprefs+=1
			add_pref "nact" "main-window-size" list "${value}"
			;;
		preferences-editor)
			let nbprefs+=1
			add_pref "nact" "preferences-dialog-size" list "${value}"
			;;
		schemes)
			let nbprefs+=1
			add_pref "nact" "scheme-default-list" list "${value}"
			;;
	esac
done
if [ ${nbprefs} -gt 0 ]; then
	cat <<! >${destconf}
[nact]
$(cat ${my_tmproot}.nact)

[runtime]
$(cat ${my_tmproot}.runtime)
!
fi

#if [ ${have_level_zero} -gt 0 ]; then
#	cat <<! >${opt_dir}/level-zero.directory
#[Desktop Entry]
#$(cat ${my_tmproot}.zero)
#!
#fi

# force sync
killall gconfd-2

# at the end, we delete all package branch from GConf
if [ "${opt_delete}" = "yes" -a ${count} -gt 0 ]; then
	if [ $(id -u) -eq 0 ]; then
		# rather a bad hack to find where mandatory keys are stored by GConf
		# nautilus-actions-delete directly removes our branch from the XML tree!
		xml=$(find /etc -name gconf.xml.mandatory)/%gconf-tree.xml
		path='/gconf/dir[@name="apps"]/dir[@name="@PACKAGE@"]'
		command "$(dirname ${opt_print})/nautilus-actions-delete --path '${path}' --xml ${xml} > ${xml}2"
		command "mv ${xml}2 ${xml}"
	else
		# this does not work for mandatory items
		command "gconftool-2 --recursive-unset ${na_package}"
	fi
fi

msg "${count} migrated items"

exit
